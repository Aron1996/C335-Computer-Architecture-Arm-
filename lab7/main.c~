/* main.c ---
 *
 * Filename: main.c
 * Description:
 * Author:
 * Maintainer:
 * Created: Thu Jan 10 11:23:43 2013
 /* Code: */

#include <stm32f30x.h> // Pull in include files for F30x standard drivers
#include <f3d_uart.h>
#include <f3d_user_btn.h>
#include <f3d_lcd_sd.h>
#include <f3d_i2c.h>
#include <f3d_led.h> 
#include <f3d_accel.h>
#include <f3d_mag.h>
#include <stdio.h>
#include <math.h>

#define TIMER 20000
#define PI 3.14159265

void drawLength(uint8_t x, uint8_t y, int length){
  int i = 0;
  if (length > 0) {
    while (i < length) {
      f3d_lcd_drawPixel(x,y-i,BLUE);
      i = i+1;
    }
  } else {
    while(i < (-1*length)) {
      f3d_lcd_drawPixel(x,y+i,BLUE);
      i=i+1;
    }
  }
}
// use previous to create the bar
void drawBar(uint8_t x, uint8_t y, int length){
  int i = 0;
  //set width to 15 
  while (i < 15) {
    drawLength(x+i,y,length);
    i = i + 1;
  }
}
/*
int function(int x, int slope){
  int y;
  y = 100 - cos (slope) * x;
  return y;
}

*/
int main(void) {


  // Set up your inits before you go ahead
  f3d_uart_init();
  f3d_user_btn_init();
  f3d_lcd_init();
  delay(10);
  f3d_led_init();
   
  f3d_i2c1_init();
  delay(10);
  f3d_accel_init();
  delay(10);
  f3d_mag_init();
  delay(10);

  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
  // create accel, mag, and gyro 
  float a[3];
  float m[3];
  float g[3];
  char output[10000];
  //create number for compass
  float pitch, heading, roll, xh, yh, degree;
  float heading2, degree2;
  //create state for button
  int button = 0;

  while(1){
    if (user_btn_read()){
      button= (button + 1)%2;
      while(user_btn_read());
    }
    f3d_lcd_fillScreen(WHITE);
    
    //extracting data 
    f3d_accel_read(a);
    f3d_mag_read(m);
    
    //calculate the pitch, roll
    pitch = atan(a[0]/sqrt(pow(a[1],2) + pow(a[2],2)));
    roll = atan(a[1]/sqrt(pow(a[0],2) + pow(a[2],2)));
    xh = m[0] * cos(pitch) + m[2]*sin(pitch);
    yh = m[0] * sin(roll)*sin(pitch) + m[1]*cos(roll)-m[2]*sin(roll)*cos(pitch);
    heading = atan2(yh , xh);
    heading2 = atan2f(yh,xh);
	      
    //  printf("button value %d",button);
    
    if (button ==1){
      f3d_lcd_drawString(60,90,"roll: ", BLACK, WHITE);
      f3d_lcd_drawString(0,90 ,"pitch: ", BLACK, WHITE);
      
      //convert to degree 
      pitch = pitch *180/PI;
      roll = roll *180 /PI;
      //roll part
      snprintf(output, 10, "%f", roll);
      f3d_lcd_drawString(0,0,"roll",BLACK,WHITE);
      f3d_lcd_drawString(40,0,output,BLACK,WHITE);
      //make sure will not excess the screen
      drawBar(90,90,(int)roll*180/PI/90);
      printf("roll %f\n", roll);
      
      //pitch part
      snprintf(output, 10, "%f", pitch);
      f3d_lcd_drawString(0,20,"pitch:",BLACK,WHITE);
      f3d_lcd_drawString(40,20,output,BLACK,WHITE);
      //make sure will not excess the screen
      drawBar(40,90,(int)pitch*180/PI/90);
      
      printf("pitch %f\n\n", pitch);
      delay(500);
      
    } 
     
    else {
      int i;
      int j;
      heading = (heading + PI)/2;
      degree = heading/PI *360;
      snprintf(output, 10, "%f", degree);
      f3d_lcd_drawString(0,0,"degree",BLACK,WHITE);
      f3d_lcd_drawString(40,0,output,BLACK,WHITE);
      //draw North line
      /*
      for(i = 60; i < 120; i ++ ){
	f3d_lcd_drawPixel(i,function(i, degree), RED);
 
	}
      */
      //     printf("degree %f",degree);
      // printf("hellow");

      
      if (degree > 0 && degree <5  ){
	f3d_lcd_drawString(0,30,"it is degree north",BLACK,WHITE);
	f3d_lcd_drawString(60,60,"N",RED,WHITE);
	f3d_lcd_drawString(25,80,"W",RED,WHITE);
	f3d_lcd_drawString(90,80,"E",RED,WHITE);
	f3d_lcd_drawString(55,100,"S",RED,WHITE);
	f3d_led_on(1);
	delay(100);
	f3d_led_off(1);
      }
      else if (degree >355){
	f3d_lcd_drawString(0,30,"it is degree north",BLACK,WHITE);
	f3d_lcd_drawString(60,60,"N",RED,WHITE);
	f3d_lcd_drawString(25,80,"W",RED,WHITE);
	f3d_lcd_drawString(90,80,"E",RED,WHITE);
	f3d_lcd_drawString(55,100,"S",RED,WHITE);
	f3d_led_on(1);
	delay(100);
	f3d_led_off(1);
      }
      
      else if (degree > 37.5 && degree < 50){
	f3d_lcd_drawString(0,30,"it is degree north",BLACK,WHITE);
	f3d_lcd_drawString(15,60,"N",RED,WHITE);
	f3d_lcd_drawString(0,150,"W",RED,WHITE);
	f3d_lcd_drawString(100,70,"E",RED,WHITE);
	f3d_lcd_drawString(65,130,"S",RED,WHITE);
	f3d_led_on(0);
	delay(100);
	f3d_led_off(0);
      }
      else if (degree > 65 && degree < 75){
	f3d_lcd_drawString(0,30,"it is degree north",BLACK,WHITE);
	f3d_lcd_drawString(0,85,"N",RED,WHITE);
	f3d_lcd_drawString(50,50,"E",RED,WHITE);
	f3d_lcd_drawString(50,120,"W",RED,WHITE);
	f3d_lcd_drawString(100,85,"S",RED,WHITE);
	f3d_led_on(7);
	delay(100);
	f3d_led_off(7);
      }

      else if (degree > 102.5 && degree < 110.5){
	f3d_lcd_drawString(0,30,"it is degree north",BLACK,WHITE);
	f3d_lcd_drawString(0,150,"N",RED,WHITE);
	f3d_lcd_drawString(15,60,"E",RED,WHITE);
	f3d_lcd_drawString(85,130,"W",RED,WHITE);
	f3d_lcd_drawString(100,70,"S",RED,WHITE);
	f3d_led_on(6);
	delay(100);
	f3d_led_off(6);
      }

      else if (degree > 140.5 && degree < 152.5){
	f3d_lcd_drawString(60,100,"N",RED,WHITE);
	f3d_lcd_drawString(0,60,"E",RED,WHITE);
	f3d_lcd_drawString(120,60,"W",RED,WHITE);
	f3d_lcd_drawString(60,30,"S",RED,WHITE);
	f3d_led_on(5);
	delay(100);
	f3d_led_off(5);
 }

      
      else if (degree > 190.5 && degree < 200.5){
      
	f3d_lcd_drawString(0,150,"E",RED,WHITE);
	f3d_lcd_drawString(15,60,"S",RED,WHITE);
	f3d_lcd_drawString(85,130,"N",RED,WHITE);
	f3d_lcd_drawString(100,30,"W",RED,WHITE);
	f3d_led_on(4);
	delay(100);
	f3d_led_off(4);
      }
      
      else if (degree > 240 && degree < 250){
	f3d_lcd_drawString(60,100,"E",RED,WHITE);
	f3d_lcd_drawString(0,60,"S",RED,WHITE);
	f3d_lcd_drawString(120,60,"N",RED,WHITE);
	f3d_lcd_drawString(60,30,"W",RED,WHITE);
	f3d_led_on(3);
	delay(100);
	f3d_led_off(3);
      }
      
       else if (degree > 292.5 && degree < 302.5){
	f3d_lcd_drawString(0,150,"S",RED,WHITE);
	f3d_lcd_drawString(15,60,"W",RED,WHITE);
	f3d_lcd_drawString(85,130,"E",RED,WHITE);
	f3d_lcd_drawString(100,30,"N",RED,WHITE);

	f3d_led_on(2);
	delay(100);
	f3d_led_off(2);
      }
      printf("\ndegree %f",degree);
      delay(200);
    }

  }
}
#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
  /* Infinite loop */
  /* Use GDB to find out why we're here */
  while (1);
}
#endif

/* main.c ends here */
